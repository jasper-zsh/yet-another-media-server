// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: media_library/media_library.proto

package media_library

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MediaLibraryClient is the client API for MediaLibrary service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MediaLibraryClient interface {
	CreateLibrary(ctx context.Context, in *CreateLibraryRequest, opts ...grpc.CallOption) (*Library, error)
	GetLibrary(ctx context.Context, in *GetLibraryRequest, opts ...grpc.CallOption) (*GetLibraryResponse, error)
	CreateMedia(ctx context.Context, in *CreateMediaRequest, opts ...grpc.CallOption) (*Media, error)
	PaginateMediaByMetadata(ctx context.Context, in *PaginateMediaByMetadataRequest, opts ...grpc.CallOption) (*PaginateMediaByMetadataResponse, error)
	GetMedia(ctx context.Context, in *GetMediaRequest, opts ...grpc.CallOption) (*Media, error)
	GetMediaByFilePath(ctx context.Context, in *GetMediaByFilePathRequest, opts ...grpc.CallOption) (*GetMediaByFilePathResponse, error)
	CreateMetadata(ctx context.Context, in *CreateMetadataRequest, opts ...grpc.CallOption) (*Metadata, error)
	PaginateMetadata(ctx context.Context, in *PaginateMetadataRequest, opts ...grpc.CallOption) (*PaginateMetadataResponse, error)
	GetMetadataByValue(ctx context.Context, in *GetMetadataByValueRequest, opts ...grpc.CallOption) (*GetMetadataByValueResponse, error)
	CreateMediaMetadataRelation(ctx context.Context, in *CreateMediaMetadataRelationRequest, opts ...grpc.CallOption) (*CreateMediaMetadataRelationResponse, error)
	DeleteMetadata(ctx context.Context, in *DeleteMetadataRequest, opts ...grpc.CallOption) (*DeleteMetadataResponse, error)
	CreateFile(ctx context.Context, in *CreateFileRequest, opts ...grpc.CallOption) (*File, error)
}

type mediaLibraryClient struct {
	cc grpc.ClientConnInterface
}

func NewMediaLibraryClient(cc grpc.ClientConnInterface) MediaLibraryClient {
	return &mediaLibraryClient{cc}
}

func (c *mediaLibraryClient) CreateLibrary(ctx context.Context, in *CreateLibraryRequest, opts ...grpc.CallOption) (*Library, error) {
	out := new(Library)
	err := c.cc.Invoke(ctx, "/media_library.Media_library/CreateLibrary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaLibraryClient) GetLibrary(ctx context.Context, in *GetLibraryRequest, opts ...grpc.CallOption) (*GetLibraryResponse, error) {
	out := new(GetLibraryResponse)
	err := c.cc.Invoke(ctx, "/media_library.Media_library/GetLibrary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaLibraryClient) CreateMedia(ctx context.Context, in *CreateMediaRequest, opts ...grpc.CallOption) (*Media, error) {
	out := new(Media)
	err := c.cc.Invoke(ctx, "/media_library.Media_library/CreateMedia", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaLibraryClient) PaginateMediaByMetadata(ctx context.Context, in *PaginateMediaByMetadataRequest, opts ...grpc.CallOption) (*PaginateMediaByMetadataResponse, error) {
	out := new(PaginateMediaByMetadataResponse)
	err := c.cc.Invoke(ctx, "/media_library.Media_library/PaginateMediaByMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaLibraryClient) GetMedia(ctx context.Context, in *GetMediaRequest, opts ...grpc.CallOption) (*Media, error) {
	out := new(Media)
	err := c.cc.Invoke(ctx, "/media_library.Media_library/GetMedia", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaLibraryClient) GetMediaByFilePath(ctx context.Context, in *GetMediaByFilePathRequest, opts ...grpc.CallOption) (*GetMediaByFilePathResponse, error) {
	out := new(GetMediaByFilePathResponse)
	err := c.cc.Invoke(ctx, "/media_library.Media_library/GetMediaByFilePath", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaLibraryClient) CreateMetadata(ctx context.Context, in *CreateMetadataRequest, opts ...grpc.CallOption) (*Metadata, error) {
	out := new(Metadata)
	err := c.cc.Invoke(ctx, "/media_library.Media_library/CreateMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaLibraryClient) PaginateMetadata(ctx context.Context, in *PaginateMetadataRequest, opts ...grpc.CallOption) (*PaginateMetadataResponse, error) {
	out := new(PaginateMetadataResponse)
	err := c.cc.Invoke(ctx, "/media_library.Media_library/PaginateMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaLibraryClient) GetMetadataByValue(ctx context.Context, in *GetMetadataByValueRequest, opts ...grpc.CallOption) (*GetMetadataByValueResponse, error) {
	out := new(GetMetadataByValueResponse)
	err := c.cc.Invoke(ctx, "/media_library.Media_library/GetMetadataByValue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaLibraryClient) CreateMediaMetadataRelation(ctx context.Context, in *CreateMediaMetadataRelationRequest, opts ...grpc.CallOption) (*CreateMediaMetadataRelationResponse, error) {
	out := new(CreateMediaMetadataRelationResponse)
	err := c.cc.Invoke(ctx, "/media_library.Media_library/CreateMediaMetadataRelation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaLibraryClient) DeleteMetadata(ctx context.Context, in *DeleteMetadataRequest, opts ...grpc.CallOption) (*DeleteMetadataResponse, error) {
	out := new(DeleteMetadataResponse)
	err := c.cc.Invoke(ctx, "/media_library.Media_library/DeleteMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaLibraryClient) CreateFile(ctx context.Context, in *CreateFileRequest, opts ...grpc.CallOption) (*File, error) {
	out := new(File)
	err := c.cc.Invoke(ctx, "/media_library.Media_library/CreateFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MediaLibraryServer is the server API for MediaLibrary service.
// All implementations must embed UnimplementedMediaLibraryServer
// for forward compatibility
type MediaLibraryServer interface {
	CreateLibrary(context.Context, *CreateLibraryRequest) (*Library, error)
	GetLibrary(context.Context, *GetLibraryRequest) (*GetLibraryResponse, error)
	CreateMedia(context.Context, *CreateMediaRequest) (*Media, error)
	PaginateMediaByMetadata(context.Context, *PaginateMediaByMetadataRequest) (*PaginateMediaByMetadataResponse, error)
	GetMedia(context.Context, *GetMediaRequest) (*Media, error)
	GetMediaByFilePath(context.Context, *GetMediaByFilePathRequest) (*GetMediaByFilePathResponse, error)
	CreateMetadata(context.Context, *CreateMetadataRequest) (*Metadata, error)
	PaginateMetadata(context.Context, *PaginateMetadataRequest) (*PaginateMetadataResponse, error)
	GetMetadataByValue(context.Context, *GetMetadataByValueRequest) (*GetMetadataByValueResponse, error)
	CreateMediaMetadataRelation(context.Context, *CreateMediaMetadataRelationRequest) (*CreateMediaMetadataRelationResponse, error)
	DeleteMetadata(context.Context, *DeleteMetadataRequest) (*DeleteMetadataResponse, error)
	CreateFile(context.Context, *CreateFileRequest) (*File, error)
	mustEmbedUnimplementedMediaLibraryServer()
}

// UnimplementedMediaLibraryServer must be embedded to have forward compatible implementations.
type UnimplementedMediaLibraryServer struct {
}

func (UnimplementedMediaLibraryServer) CreateLibrary(context.Context, *CreateLibraryRequest) (*Library, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLibrary not implemented")
}
func (UnimplementedMediaLibraryServer) GetLibrary(context.Context, *GetLibraryRequest) (*GetLibraryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLibrary not implemented")
}
func (UnimplementedMediaLibraryServer) CreateMedia(context.Context, *CreateMediaRequest) (*Media, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMedia not implemented")
}
func (UnimplementedMediaLibraryServer) PaginateMediaByMetadata(context.Context, *PaginateMediaByMetadataRequest) (*PaginateMediaByMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PaginateMediaByMetadata not implemented")
}
func (UnimplementedMediaLibraryServer) GetMedia(context.Context, *GetMediaRequest) (*Media, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMedia not implemented")
}
func (UnimplementedMediaLibraryServer) GetMediaByFilePath(context.Context, *GetMediaByFilePathRequest) (*GetMediaByFilePathResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMediaByFilePath not implemented")
}
func (UnimplementedMediaLibraryServer) CreateMetadata(context.Context, *CreateMetadataRequest) (*Metadata, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMetadata not implemented")
}
func (UnimplementedMediaLibraryServer) PaginateMetadata(context.Context, *PaginateMetadataRequest) (*PaginateMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PaginateMetadata not implemented")
}
func (UnimplementedMediaLibraryServer) GetMetadataByValue(context.Context, *GetMetadataByValueRequest) (*GetMetadataByValueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetadataByValue not implemented")
}
func (UnimplementedMediaLibraryServer) CreateMediaMetadataRelation(context.Context, *CreateMediaMetadataRelationRequest) (*CreateMediaMetadataRelationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMediaMetadataRelation not implemented")
}
func (UnimplementedMediaLibraryServer) DeleteMetadata(context.Context, *DeleteMetadataRequest) (*DeleteMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMetadata not implemented")
}
func (UnimplementedMediaLibraryServer) CreateFile(context.Context, *CreateFileRequest) (*File, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFile not implemented")
}
func (UnimplementedMediaLibraryServer) mustEmbedUnimplementedMediaLibraryServer() {}

// UnsafeMediaLibraryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MediaLibraryServer will
// result in compilation errors.
type UnsafeMediaLibraryServer interface {
	mustEmbedUnimplementedMediaLibraryServer()
}

func RegisterMediaLibraryServer(s grpc.ServiceRegistrar, srv MediaLibraryServer) {
	s.RegisterService(&MediaLibrary_ServiceDesc, srv)
}

func _MediaLibrary_CreateLibrary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLibraryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaLibraryServer).CreateLibrary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/media_library.Media_library/CreateLibrary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaLibraryServer).CreateLibrary(ctx, req.(*CreateLibraryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediaLibrary_GetLibrary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLibraryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaLibraryServer).GetLibrary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/media_library.Media_library/GetLibrary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaLibraryServer).GetLibrary(ctx, req.(*GetLibraryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediaLibrary_CreateMedia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMediaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaLibraryServer).CreateMedia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/media_library.Media_library/CreateMedia",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaLibraryServer).CreateMedia(ctx, req.(*CreateMediaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediaLibrary_PaginateMediaByMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaginateMediaByMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaLibraryServer).PaginateMediaByMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/media_library.Media_library/PaginateMediaByMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaLibraryServer).PaginateMediaByMetadata(ctx, req.(*PaginateMediaByMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediaLibrary_GetMedia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMediaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaLibraryServer).GetMedia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/media_library.Media_library/GetMedia",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaLibraryServer).GetMedia(ctx, req.(*GetMediaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediaLibrary_GetMediaByFilePath_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMediaByFilePathRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaLibraryServer).GetMediaByFilePath(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/media_library.Media_library/GetMediaByFilePath",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaLibraryServer).GetMediaByFilePath(ctx, req.(*GetMediaByFilePathRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediaLibrary_CreateMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaLibraryServer).CreateMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/media_library.Media_library/CreateMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaLibraryServer).CreateMetadata(ctx, req.(*CreateMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediaLibrary_PaginateMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaginateMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaLibraryServer).PaginateMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/media_library.Media_library/PaginateMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaLibraryServer).PaginateMetadata(ctx, req.(*PaginateMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediaLibrary_GetMetadataByValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMetadataByValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaLibraryServer).GetMetadataByValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/media_library.Media_library/GetMetadataByValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaLibraryServer).GetMetadataByValue(ctx, req.(*GetMetadataByValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediaLibrary_CreateMediaMetadataRelation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMediaMetadataRelationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaLibraryServer).CreateMediaMetadataRelation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/media_library.Media_library/CreateMediaMetadataRelation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaLibraryServer).CreateMediaMetadataRelation(ctx, req.(*CreateMediaMetadataRelationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediaLibrary_DeleteMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaLibraryServer).DeleteMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/media_library.Media_library/DeleteMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaLibraryServer).DeleteMetadata(ctx, req.(*DeleteMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediaLibrary_CreateFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaLibraryServer).CreateFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/media_library.Media_library/CreateFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaLibraryServer).CreateFile(ctx, req.(*CreateFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MediaLibrary_ServiceDesc is the grpc.ServiceDesc for MediaLibrary service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MediaLibrary_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "media_library.Media_library",
	HandlerType: (*MediaLibraryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateLibrary",
			Handler:    _MediaLibrary_CreateLibrary_Handler,
		},
		{
			MethodName: "GetLibrary",
			Handler:    _MediaLibrary_GetLibrary_Handler,
		},
		{
			MethodName: "CreateMedia",
			Handler:    _MediaLibrary_CreateMedia_Handler,
		},
		{
			MethodName: "PaginateMediaByMetadata",
			Handler:    _MediaLibrary_PaginateMediaByMetadata_Handler,
		},
		{
			MethodName: "GetMedia",
			Handler:    _MediaLibrary_GetMedia_Handler,
		},
		{
			MethodName: "GetMediaByFilePath",
			Handler:    _MediaLibrary_GetMediaByFilePath_Handler,
		},
		{
			MethodName: "CreateMetadata",
			Handler:    _MediaLibrary_CreateMetadata_Handler,
		},
		{
			MethodName: "PaginateMetadata",
			Handler:    _MediaLibrary_PaginateMetadata_Handler,
		},
		{
			MethodName: "GetMetadataByValue",
			Handler:    _MediaLibrary_GetMetadataByValue_Handler,
		},
		{
			MethodName: "CreateMediaMetadataRelation",
			Handler:    _MediaLibrary_CreateMediaMetadataRelation_Handler,
		},
		{
			MethodName: "DeleteMetadata",
			Handler:    _MediaLibrary_DeleteMetadata_Handler,
		},
		{
			MethodName: "CreateFile",
			Handler:    _MediaLibrary_CreateFile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "media_library/media_library.proto",
}
